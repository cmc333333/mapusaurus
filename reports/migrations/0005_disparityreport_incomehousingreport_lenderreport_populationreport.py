# Generated by Django 2.1.7 on 2019-03-03 20:28

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('reports', '0004_lenderreport'),
    ]

    operations = [
        migrations.CreateModel(
            name='DisparityReport',
            fields=[
                ('compound_id', models.CharField(max_length=14, primary_key=True, serialize=False)),
                ('year', models.SmallIntegerField()),
                ('approved', models.BooleanField()),
                ('lien_status', models.CharField(max_length=1)),
                ('loan_purpose', models.CharField(max_length=1)),
                ('owner_occupancy', models.CharField(max_length=1)),
                ('property_type', models.CharField(max_length=1)),
                ('all_records', models.IntegerField()),
                ('white', models.IntegerField(verbose_name='White borrowers')),
                ('black', models.IntegerField(verbose_name='Black')),
                ('hispanic', models.IntegerField(verbose_name='Hispanic/Latino')),
                ('asian', models.IntegerField(verbose_name='Asian')),
                ('minb', models.IntegerField(verbose_name='Minority')),
                ('lmib', models.IntegerField(verbose_name='LMI Applicant')),
                ('muib', models.IntegerField(verbose_name='MUI Borrowers')),
                ('female', models.IntegerField(verbose_name='Female')),
                ('male', models.IntegerField(verbose_name='Male')),
                ('lmit', models.IntegerField(verbose_name='Applicant in LMI Tract')),
                ('muit', models.IntegerField(verbose_name='MUI Tracts')),
                ('mint', models.IntegerField(verbose_name='Applicant in Minority Tract')),
                ('whitet', models.IntegerField(verbose_name='White Majority Tracts')),
            ],
            options={
                'abstract': False,
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IncomeHousingReport',
            fields=[
                ('compound_id', models.CharField(max_length=9, primary_key=True, serialize=False)),
                ('year', models.SmallIntegerField()),
                ('home_total', models.IntegerField(verbose_name='Single Family Homes')),
                ('occupied', models.IntegerField(verbose_name='Owner Occupied Homes')),
                ('tract_total', models.IntegerField(verbose_name='Total Tracts')),
                ('lmi_tracts', models.IntegerField(verbose_name='LMI Tracts in Geography')),
                ('min_tracts', models.IntegerField(verbose_name='Minority Tracts in Geography')),
                ('pop_total', models.IntegerField(verbose_name='Total Population')),
                ('pop_lmi', models.IntegerField(verbose_name='Population in LMI Tracts')),
                ('pop_min', models.IntegerField(verbose_name='Population in Minority Tracts')),
            ],
            options={
                'abstract': False,
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LenderReport',
            fields=[
                ('compound_id', models.CharField(max_length=28, primary_key=True, serialize=False)),
                ('year', models.SmallIntegerField()),
                ('lien_status', models.CharField(max_length=1)),
                ('loan_purpose', models.CharField(max_length=1)),
                ('owner_occupancy', models.CharField(max_length=1)),
                ('property_type', models.CharField(max_length=1)),
                ('lender_name', models.CharField(max_length=128)),
                ('applications', models.IntegerField()),
                ('approved', models.IntegerField()),
                ('lmit_approved', models.IntegerField()),
                ('lmib_approved', models.IntegerField()),
                ('mint_approved', models.IntegerField()),
                ('minb_approved', models.IntegerField()),
            ],
            options={
                'abstract': False,
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PopulationReport',
            fields=[
                ('compound_id', models.CharField(max_length=9, primary_key=True, serialize=False)),
                ('year', models.SmallIntegerField()),
                ('total', models.IntegerField(verbose_name='All Population')),
                ('white', models.IntegerField(verbose_name='White')),
                ('hispanic', models.IntegerField(verbose_name='Hispanic/Latino')),
                ('black', models.IntegerField(verbose_name='Black')),
                ('asian', models.IntegerField(verbose_name='Asian')),
                ('minority', models.IntegerField(verbose_name='Minority')),
                ('poverty', models.IntegerField(verbose_name='People Living in Poverty')),
            ],
            options={
                'abstract': False,
                'managed': False,
            },
        ),
        migrations.RunSQL(
            "DROP INDEX reports_disparityreport_idx",
            """
            CREATE INDEX reports_disparityreport_idx
            ON reports_disparityreport (
                year, county_id, approved,
                lien_status, loan_purpose, owner_occupancy, property_type
            )
            """,
        ),
        migrations.RunSQL(
            """
            CREATE INDEX reports_disparityreport_idx
            ON reports_disparityreport (
                year, county_id,
                lien_status, loan_purpose, owner_occupancy, property_type
            )
            """,
            "DROP INDEX reports_disparityreport_idx",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX reports_disparityreport_approved_idx
            ON reports_disparityreport (
                year, county_id,
                lien_status, loan_purpose, owner_occupancy, property_type
            )
            WHERE approved IS true
            """,
            "DROP INDEX reports_disparityreport_approved_idx",
        ),
    ]
